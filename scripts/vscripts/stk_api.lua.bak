require('internal/util')
require('gamemode')

keyvalue = {}
GameRules.unitdata = {}

GameRules.upgradedata = {}
GameRules.upgradedata["melee_damage"] = {cost = 275, level = 0}
GameRules.upgradedata["melee_armor"] = {cost = 275, level = 0}
GameRules.upgradedata["melee_body"] = {cost = 275, level = 0}
GameRules.upgradedata["range_damage"] = {cost = 275, level = 0}
GameRules.upgradedata["range_armor"] = {cost = 275, level = 0}
GameRules.upgradedata["range_body"] = {cost = 275, level = 0}
--GameRules.GameRules.upgradedata["range_range"] = {cost = 1000, level = 0}
GameRules.upgradedata["healer_armor"] = {cost = 275, level = 0}
GameRules.upgradedata["healer_body"] = {cost = 275, level = 0}
--GameRules.GameRules.upgradedata["healer_heal"] = {cost = 1000, level = 0}
GameRules.upgradedata["special_armor"] = {cost = 275, level = 0}
GameRules.upgradedata["special_body"] = {cost = 275, level = 0}
--GameRules.GameRules.upgradedata["special_mana"] = {cost = 1000, level = 0}

-- Проверка игрока на валидность
function game_IsPlayerValid(playerID)
	if playerID and PlayerResource:GetConnectionState(playerID) == DOTA_CONNECTION_STATE_CONNECTED and PlayerResource:GetPlayer(playerID) and PlayerResource:IsValidPlayer(playerID) and PlayerResource:HasSelectedHero( playerID ) then
		return true
	else return false
end

-- Загружает базовые данные игрока
function LoadPlayerBasics (playerID)
	if game_IsPlayerValid(playerID) then
		CDOTA_PlayerResource.PlayerData = {}
		CustomGameEventManager:Send_ServerToPlayer( PlayerResource:GetPlayer(playerID), "load_configs", {income_count =  INCOME_COUNT, bonus_food = BONUS_FOOD}) 	-- Загрузка параметров игры
		CustomGameEventManager:Send_ServerToPlayer( PlayerResource:GetPlayer(playerID), "load_allunits", GameRules.unitdata )										-- Загрузка параметров юнитов
		CustomGameEventManager:Send_ServerToPlayer( PlayerResource:GetPlayer(playerID), "load_allupgrades", CDOTA_PlayerResource:GetUpgradelist(data.PlayerID) ) 	-- Загрузка параметров улучшений
		LoadPlayerUnits(playerID)
		Msg("<<==>> [VE] Player BASICS was loaded <<==>>");
	end
end

-- Загружает список купленных юнитов игрока
function LoadPlayerUnits(playerID)
	if game_IsPlayerValid(playerID) then	
		CustomGameEventManager:Send_ServerToPlayer( PlayerResource:GetPlayer(playerID), "load_playerunits", curunitlist )	-- Загрузка купленных юнитов игрока
	end
end

-- PLAYER DATA: Получить текущее количество дохода игрока
function CDOTA_PlayerResource:GetIncome(playerID)
    return CDOTA_PlayerResource.PlayerData[playerID].income or 0 -- return income if set or default value (0)
end

-- PLAYER DATA: Установить текущее количество дохода игрока
function CDOTA_PlayerResource:SetIncome(playerID, val)
	CDOTA_PlayerResource.PlayerData[playerID].income = val
    return CDOTA_PlayerResource.PlayerData[playerID].income
end

-- PLAYER DATA: Установить текущее количество еды игрока
function CDOTA_PlayerResource:SetFood(playerID, val)
	CDOTA_PlayerResource.PlayerData[playerID].food = val
    return CDOTA_PlayerResource.PlayerData[playerID].food
end

-- PLAYER DATA: Получить текущее количество еды игрока
function CDOTA_PlayerResource:GetFood(playerID)
    return CDOTA_PlayerResource.PlayerData[playerID].food or 0
end

-- PLAYER DATA: Установить максимальное количество еды игрока
function CDOTA_PlayerResource:SetMaxFood(playerID, val)
	CDOTA_PlayerResource.PlayerData[playerID].maxfood = val
    return CDOTA_PlayerResource.PlayerData[playerID].maxfood
end

-- PLAYER DATA: Получить максимальное количество еды игрока
function CDOTA_PlayerResource:GetMaxFood(playerID)
    return CDOTA_PlayerResource.PlayerData[playerID].maxfood or 0
end

-- PLAYER DATA: Получить параметры юнитов игрока (количество и т.п.)
function CDOTA_PlayerResource:GetUnitlist(playerID)
	--DeepPrintTable(PlayerData[playerID].unitlist)
    return CDOTA_PlayerResource.PlayerData[playerID].unitlist or 0
end

-- PLAYER DATA: Установить паракетры юниов игрока (количество и т.п.)
function CDOTA_PlayerResource:SetUnitlist(playerID, curlist)
	CDOTA_PlayerResource.PlayerData[playerID].unitlist = deepcopy(curlist)
    return CDOTA_PlayerResource.PlayerData[playerID].unitlist
end

-- PLAYER DATA: Получить паметры улучшений игрока (уровень, стоимость и т.п.)
function CDOTA_PlayerResource:GetUpgradelist(playerID)
	--DeepPrintTable(PlayerData[playerID].unitlist)
    return CDOTA_PlayerResource.PlayerData[playerID].upgradelist or 0
end

-- PLAYER DATA: Установить параметры улучшений игрока (уровень, стоимость и т.п.)
function CDOTA_PlayerResource:SetUpgradelist(playerID, curlist)
	CDOTA_PlayerResource.PlayerData[playerID].upgradelist = deepcopy(curlist)
    return CDOTA_PlayerResource.PlayerData[playerID].upgradelist
end

-- PLAYER DATA: Установить количество юнитов игрока
function CDOTA_PlayerResource:SetUnitCount(playerID, name, count)
	for _,unit in pairs(CDOTA_PlayerResource.PlayerData[playerID].unitlist) do
		if unit.name == name then
			unit.count = unit.count + count
			break
		end
	end
end

-- PLAYER DATA: Получить количество юнитов игрока
function CDOTA_PlayerResource:GetUnitCount(playerID, name)
	for _,unit in pairs(CDOTA_PlayerResource.PlayerData[playerID].unitlist) do
		if unit.name == name then
			return unit.count
		end
	end
end

-- Заспавнить крипов в указанной точке
-- * unit - имя юнита
-- * count - количество юнитов
-- * start_point - координаты точки появления
-- * target_point - точка, к которой юнит будет отправлен после появления
-- * team - команда юнита
-- * hero - владелец юнита (герой)
function spawnCreep(unit, count, start_point, target_point, team, hero)				
	local upgradelist = CDOTA_PlayerResource:GetUpgradelist(hero:GetPlayerOwnerID())
	
	for i=1, count do
		local r_unit = CreateUnitByName( unit, start_point + RandomVector( RandomFloat( 0, 200 ) ), true, hero, hero, team )
		r_unit:SetInitialGoalEntity( target_point )
		if CREEP_ARENA_BUFF == true then
			local ability = r_unit:AddAbility("ve_paladins_arena_unit_buff")
			ability:SetLevel(1)
		end
		r_unit:SetMinimumGoldBounty(r_unit:GetMinimumGoldBounty()*CREEP_GOLD_REWARD_CONST)
		r_unit:SetMaximumGoldBounty(r_unit:GetMaximumGoldBounty()*CREEP_GOLD_REWARD_CONST)
		--r_unit:SetOwner(hero)
		--r_unit:SetControllableByPlayer(hero:GetPlayerOwnerID(), false)	
		
		local unitname = r_unit:GetUnitName()
		if GameRules.unitdata[unitname].AItype == "healer" then 
			r_unit.ThinkerType = "healer"
			r_unit.CastAbilityIndex = r_unit:GetAbilityByIndex(0):entindex()
			r_unit.NextOrderTime = GameRules:GetGameTime() + 1
			table.insert(GameMode.UnitThinkerList, r_unit)
		elseif GameRules.unitdata[unitname].AItype == "target_caster" then 
			r_unit.ThinkerType = "target_caster"
			r_unit.CastAbilityIndex = r_unit:GetAbilityByIndex(0):entindex()
			r_unit.NextOrderTime = GameRules:GetGameTime() + 1
			table.insert(GameMode.UnitThinkerList, r_unit)
		elseif GameRules.unitdata[unitname].AItype == "target_point" then 
			r_unit.ThinkerType = "target_point"
			r_unit.CastAbilityIndex = r_unit:GetAbilityByIndex(0):entindex()
			r_unit.NextOrderTime = GameRules:GetGameTime() + 1
			table.insert(GameMode.UnitThinkerList, r_unit)
		end
					
		if GameRules.unitdata[unitname].UnitType == "melee" then
			r_unit:SetBaseDamageMin(r_unit:GetBaseDamageMin() + upgradelist["melee_damage"].level*10)
			r_unit:SetBaseDamageMax(r_unit:GetBaseDamageMax() + upgradelist["melee_damage"].level*10)				
			r_unit:SetPhysicalArmorBaseValue(r_unit:GetPhysicalArmorBaseValue() + upgradelist["melee_armor"].level*1)
			r_unit:SetBaseMaxHealth(r_unit:GetBaseMaxHealth() + upgradelist["melee_body"].level*50)
		elseif GameRules.unitdata[unitname].UnitType == "range" then
			r_unit:SetBaseDamageMin(r_unit:GetBaseDamageMin() + upgradelist["range_damage"].level*10)
			r_unit:SetBaseDamageMax(r_unit:GetBaseDamageMax() + upgradelist["range_damage"].level*10)				
			r_unit:SetPhysicalArmorBaseValue(r_unit:GetPhysicalArmorBaseValue() + upgradelist["range_armor"].level*1)
			r_unit:SetBaseMaxHealth(r_unit:GetBaseMaxHealth() + upgradelist["range_body"].level*50)			
		elseif GameRules.unitdata[unitname].UnitType == "healer" then			
			r_unit:SetPhysicalArmorBaseValue(r_unit:GetPhysicalArmorBaseValue() + upgradelist["healer_armor"].level*1)
			r_unit:SetBaseMaxHealth(r_unit:GetBaseMaxHealth() + upgradelist["healer_body"].level*50)				
		elseif GameRules.unitdata[unitname].UnitType == "special" then
			r_unit:SetPhysicalArmorBaseValue(r_unit:GetPhysicalArmorBaseValue() + upgradelist["special_armor"].level*1)
			r_unit:SetBaseMaxHealth(r_unit:GetBaseMaxHealth() + upgradelist["special_body"].level*50)			
			--r_unit:SetMana(r_unit:GetMana() + upgradelist["special_mana"].level*50)			
		end
	end
end